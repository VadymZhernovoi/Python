from collections import defaultdict
from modules.db_connector import db_connector

db_connector.check_connection()

from modules.io_manager import (display_page_by_page, display_page, input_year, display_selected_category, print_error,
                                print_color, input_color, show_statistics, check_for_exit)
from modules.log_manager import (show_popular_keyword, show_popular_category, get_popular,
                                 get_last_uniq, get_last_keyword, get_last_category)

from modules.db_request import (select_all_category, select_by_category_cols, select_by_category_body,
                                select_by_title_cols, select_by_title_body)
from modules.parm_const import (MAIN_MENU, MENU_STATISTICS, SEARCH_TYPE, COL_CATEGORY_ID, COL_CATEGORY,
                                COL_YEAR_MIN, COL_YEAR_MAX, KEY_RETURN, TXT_RETURN, KEY_EXIT, TXT_EXIT,
                                COL_KEYWORD_MONGO, BEGIN_MSG_STATISTICS, COLOR_ITEM_MENU, COLOR_RESET)


def form_menu(menu: tuple[dict], title: str = '', main: bool = False):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –º–µ–Ω—é
    :param menu: —Å–ª–æ–≤–∞—Ä—å —Å—Ç—Ä–æ–∫ –º–µ–Ω—é, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å
    :param title: –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ–Ω—é
    :param main: True - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """

    while True:
        max_len_title = max(len(f"{i}. {item['name']}") for i, item in enumerate(menu, 1))
        if max_len_title > len(title):
            line = title.center(max_len_title, "-")
        else:
            line = title
        msg_error_num = ''
        print_color(f"{line}", "yellow", True, False)
        try:
            for i in range(len(menu)):
                r = i + 1
                msg = f"{COLOR_ITEM_MENU}{r}{COLOR_RESET}. {menu[i]["name"]}"
                print(msg)
            print("-" * max_len_title)
            if main:
                # msg = (f"{COLOR_ITEM_MENU}{KEY_RETURN[0]}{COLOR_RESET} / "
                #       f"{COLOR_ITEM_MENU}{KEY_EXIT[0]}{COLOR_RESET} - {KEY_EXIT[1]}")
                msg = f"{COLOR_ITEM_MENU}{KEY_EXIT[0]}{COLOR_RESET} - {KEY_EXIT[1]}"
                print(msg, "\n")
            else:
                msg = f"{TXT_RETURN} / [{KEY_EXIT[0]}] - {KEY_EXIT[1]}"
                print_color(msg, "Blue", False)

            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ: ")

            check_for_exit(choice, main)

            if choice == KEY_RETURN[0]:

                return None

            msg_error_num = f"–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç 0 –¥–æ {len(menu) + 1}"
            if not choice or choice.isspace():
                raise ValueError(msg_error_num)

            if choice.isdigit():
                choice = int(choice)
                if 0 < choice <= len(menu) + 1:
                    func_run = menu[choice - 1]["menu_func"]
                    func = globals().get(func_run)  # –Ω–∞—Ö–æ–¥–∏–º —Ñ—É–Ω–∫—Ü–∏—é
                    if callable(func):              # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª–Ω–∏–º–∞—è –æ–Ω–∞?
                        func()                      # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                    else:
                        raise ValueError(f"–§—É–Ω–∫—Ü–∏—è '{func_run!r}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                else:
                    raise ValueError(msg_error_num)
            else:
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: '{choice}'")

        except ValueError as e:
            print_error(f"{e}")
        except IndexError:
            print_error(msg_error_num)
        except TypeError as e:
            print_error(f"{e}")


def main_menu():
    """ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É """

    form_menu(MAIN_MENU, " [–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é] ", True)


def menu_statistics():
    """ –ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ """

    form_menu(MENU_STATISTICS, " [–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤] ")


def search_by_title():
    """ –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ñ–∏–ª—å–º–∞ """

    while True:
        msg = f"–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ ([Enter] - {KEY_RETURN[1]} / {TXT_EXIT}) üîë"
        keyword = input_color(msg, "Cyan").strip().upper()

        check_for_exit(keyword)

        if not keyword or keyword.isspace():
            return None

        # –Ω–∞—Ö–æ–¥–∏–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–≤—à–∏—Ö —Ñ–∏–ª—å–º–æ–≤
        # —Ö–æ—Ç—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é MySQL –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä –∏ –≤ –ë–î "sakila" –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤ –∑–∞–ø–∏—Å–∞–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ,
        # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—Ä–∏–≤–µ–¥—ë–º –∫ –æ–¥–Ω–æ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É, –∑–∞–≤—Ç—Ä–∞ –º–æ–≥—É—Ç –ø–æ—è–≤–∏—Ç—å—Å—è –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∏–∑–º–µ–Ω—è—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —è–¥—Ä–∞ –ë–î
        select_parm = (f"%{keyword}%",)
        msg_search = f"–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É {COL_KEYWORD_MONGO[2]}'{keyword}'"
        row_cnt = display_page_by_page(select_by_title_cols, select_by_title_body, select_parm, msg_search, keyword)
        if row_cnt:  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞
            param = {"keyword": keyword}
            db_connector.insert_log(SEARCH_TYPE[0], param, row_cnt)

            return


def search_by_category():
    """ –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∂–∞–Ω—Ä—É –∏ –≥–æ–¥–∞–º (–º–∏–Ω-–º–∞–∫—Å) –≤—ã–ø—É—Å–∫–∞ —Ñ–∏–ª—å–º–∞ """

    categories = db_connector.query_execute(select_all_category, fetch="all")
    # –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—É
    print_color("[–°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤]", "yellow", True, False)
    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π (category_id –Ω—É–∂–Ω–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞, —á—Ç–æ –±—ã –Ω–µ –¥–µ–ª–∞—Ç—å 3-–π JOIN)
    cols = ["‚Ññ"]
    cols.extend(list(categories[0])[:-1])
    # –¥–æ–±–∞–≤–ª—è—é —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É (–∫—Ä–æ–º–µ category_id)
    rows = [[i] + [item[col] for col in cols[1:]] for i, item in enumerate(categories, 1)]

    display_page(cols, rows, 1, 1, False)
    string = ''
    while True:
        try:
            msg = f"–í–≤–µ–¥–∏—Ç–µ –ù–æ–º–µ—Ä / –ù–∞–∑–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ ({TXT_RETURN} / {TXT_EXIT})"
            string = input_color(msg, "Cyan")

            check_for_exit(string)
            if not string:
                print_error(f"–ù–µ —É–∫–∞–∑–∞–Ω –ù–æ–º–µ—Ä / –ù–∞–∑–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞!")
                continue
            if string == KEY_RETURN[0]:
                return None

            category_selected = {}
            if string.isdigit():
                num = int(string)
                if 1 <= num <= len(categories):
                    enumerate(categories, 1)
                    category_selected = categories[num - 1]
                else:
                    print_error(f"–ñ–∞–Ω—Ä –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {string} –≤ —Å–ø–∏—Å–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            else:
                category_selected = list(filter(lambda d: d[COL_CATEGORY].upper() == string.upper(), categories))[0]

            if category_selected:
                search_parm = defaultdict()
                search_parm[COL_CATEGORY_ID] = category_selected[COL_CATEGORY_ID]
                search_parm[COL_CATEGORY] = category_selected[COL_CATEGORY]
                year_min, year_max = category_selected[COL_YEAR_MIN], category_selected[COL_YEAR_MAX]
                display_selected_category(search_parm)
                while True:
                    year_start = input_year(COL_YEAR_MIN, year_min, year_max)
                    if year_start is None:

                        return None

                    elif year_start == -1:
                        continue
                    elif year_start:
                        search_parm["year_start"] = year_start
                        display_selected_category(search_parm)
                        while True:
                            year_stop = input_year(COL_YEAR_MAX, year_start, year_max)
                            if year_stop is None:

                                return None

                            elif year_stop == -1:
                                continue
                            elif year_stop:
                                search_parm["year_stop"] = year_stop
                                row_cnt = display_by_category(search_parm, False)
                                if row_cnt:  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞
                                    param = {
                                        "genre_name": search_parm[COL_CATEGORY],
                                        "year_start": search_parm["year_start"],
                                        "year_stop": search_parm["year_stop"]
                                    }
                                    db_connector.insert_log(SEARCH_TYPE[1], param, row_cnt)
                                return
                            else:
                                continue
                    else:
                        continue

        except IndexError:
            print_error(f"–ñ–∞–Ω—Ä '{string}' –≤ —Å–ø–∏—Å–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

        except Exception as e:
            print_error(f"–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫:\n{e}")


def display_by_category(search_parm: dict, print_run: bool = True):
    """
    —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ –∂–∞–Ω—Ä—É –∏ –≥–æ–¥–∞–º —Ñ–∏–ª—å–º–æ–≤
    :param search_parm: —Å–ª–æ–≤–∞—Ä—å —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                        {category_id': 2, '–≥–æ—Ä–∏—è': 'Animation', 'year_start': 1990, 'year_stop': 2025}
    :param print_run: True - –ø–µ—á–∞—Ç–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    :return:
    """

    select_parm = (search_parm[COL_CATEGORY_ID], search_parm["year_start"], search_parm["year_stop"])
    msg_search = display_selected_category(search_parm, print_run)

    return display_page_by_page(select_by_category_cols, select_by_category_body, select_parm, msg_search)


def print_title_statistics(menu_item_func):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—É–Ω–∫—Ç –≤—ã–∑–≤–∞–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é –±–µ–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞ BEGIN_MSG_STATISTICS ("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å")
    :return: –≤ —Å—Ç—Ä–æ–∫–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    """
    # –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä —á—Ç–æ–±—ã –ø–æ –∫–ª—é—á—É "menu_func" –Ω–∞–π—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é (–∫–ª—é—á "name")
    title = next(item["name"] for item in MENU_STATISTICS if item["menu_func"] == menu_item_func)
    # —É–¥–∞–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ BEGIN_MSG_STATISTICS ("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å")
    title = title.replace(BEGIN_MSG_STATISTICS, "", 1).strip()
    print_color(f"[{title}]", "yellow", True, False)

    return None


def show_popular_query():
    """
    –∫–æ–º–∞–Ω–¥–∞ –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    print_title_statistics("show_popular_query")
    # tabl_keyword = show_popular_keyword()
    # tabl_category = show_popular_category()
    # tabl_popular = combined_lists(tabl_keyword, tabl_category)  # —Å–∫–ª–µ–∏–º –¥–≤–µ —Ç–∞–±–ª–∏—Ü—ã
    tabl_popular = get_popular()
    show_statistics(tabl_popular)

    return None


def show_popular_query_full():
    """
    –∫–æ–º–∞–Ω–¥–∞ –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –∏ –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏+–≥–æ–¥–∞–º
    """
    print_title_statistics("show_popular_query_full")
    tabl_keyword = show_popular_keyword()
    tabl_category = show_popular_category()

    show_statistics(tabl_keyword, tabl_category)

    return None


def show_last_query():
    """
    –∫–æ–º–∞–Ω–¥–∞ –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    print_title_statistics("show_last_query")
    #tabl_last = show_last()
    tabl_last = get_last_uniq()
    show_statistics(tabl_last)

    return None


def show_last_query_full():
    """
    –∫–æ–º–∞–Ω–¥–∞ –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –∏ –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏+–≥–æ–¥–∞–º
    """
    print_title_statistics("show_last_query_full")
    # tabl_keyword = show_last_keyword()
    #tabl_category = show_last_category()
    tabl_keyword = get_last_keyword()
    tabl_category = get_last_category()

    show_statistics(tabl_keyword, tabl_category)

    return None


if __name__ == "__main__":
    main_menu()
